Motivation
==========

Problem statement
-----------------

Sphinx historically uses a dynamic configuration approach via the ``conf.py`` file.
While this provides great flexibility, it poses a number of challenges

- Cannot be read outside of Python, for tools such as |ubcode| that require the configuration.
- Bigger projects tend to modularize their ``conf.py`` files.
  This means a simple AST readout of the ``conf.py`` is not possible as imports have
  to be followed.
- Quite often additional Python dependencies are required, to import ``conf.py``.
  Those must be installed into a virtual environment before importing works.
  This also means you can't just import the conf.py in a system Python interpreter.
- Using Python as a configuration language can sometimes lead to unintended complexity.
  For example, some projects may include time-consuming operations like network requests
  during configuration loading, which can slow down the documentation build process.
  A declarative configuration format helps encourage simpler, more maintainable practices.
- The final configuration is not directly visible to end users.
  They have to read through the entire ``conf.py`` (and its imports) to understand
  the final configuration.
- It's often just unnecessary complexity for simple configuration needs.

Use cases
---------

``needs-config-writer`` aims to solve these issues by providing a way to
export Sphinx-Needs configuration from ``conf.py`` into a static ``ubproject.toml`` file.
This can be a one-time activity or can be done regularly to keep the file in sync.

This extension can be used in multiple use case.

Migration
~~~~~~~~~

Migrate configuration from ``conf.py`` to ``ubproject.toml``.
Just add this extension and copy over the configuration from ``_build/html/ubproject.toml``
to your own ``ubproject.toml``. This file should commonly be located where ``conf.py`` is.
Then use
`needs_from_toml <https://sphinx-needs.readthedocs.io/en/latest/configuration.html#needs-from-toml>`__
to load configuration from the file for subsequent Sphinx-Needs builds.

Keep in sync
~~~~~~~~~~~~

Keep ``ubproject.toml`` in sync with ``conf.py``.
This is useful if you want to keep using ``conf.py`` as main configuration source,
but also want to provide declarative configuration ``ubproject.toml`` for tools like
|ubcode|.

If the setting :ref:`config_outpath` is set to ``ubproject.toml``, the file will be
written to the location of ``conf.py``, keeping both files in sync.
``ubproject.toml`` should be version controlled, so tools like |ubcode| can access
it without running any build system step. That leads to happy developers.

Complex setups
~~~~~~~~~~~~~~

If you have a distributed documentation build setup that

- has multiple repositories involved in building documentation,
- stores configuration at a central place, maybe in a different repo,
- might require building dependencies such as ``needs.json`` files before building the docs or
- builds dependencies in sandboxes, with remote caching or remote execution,

then this use case might be worth looking into.
Build system such as `Bazel <https://bazel.build/>`__ will work with this.

Multiple problems have to be solved in such a setup:

- How to provide Sphinx-Needs configuration to the build system?
- How to provide Sphinx-Needs configuration to |ubcode|?
- How to know which files go into a documentation build?

Generally the knowledge is hidden somewhere in build system files, and it needs to be made
available to all tools involved, both build system and |ubcode|.

A full example can be found in the tests/complex_setups folder of this repository.

Imagine this file hierarchy::

  .
  ├── generated_config
  │   ├── schemas.json
  │   └── ubproject.toml
  ├── generated_deps
  │   └── needs_test.json
  └── project
      ├── conf.py
      ├── index.rst
      └── ubproject.toml

The ``generated_*`` folders are generated by the build system (e.g., Bazel) before building the
docs. They contain generated configuration and dependencies such as ``needs.json`` files.

Whenever a local or shared configuration changes, the build system runs Sphinx with
``needs-config-writer`` enabled, generating the ``ubproject.toml`` file in
``project/ubproject.toml``. It's a pure product of the assembled configuration,
and can directly be used with tools like |ubcode|.

.. dropdown:: generated_config/schemas.json

   .. literalinclude:: ../tests/complex_setups/generated_config/schemas.json
      :language: json

.. dropdown:: generated_config/ubproject.toml

   .. literalinclude:: ../tests/complex_setups/generated_config/ubproject.toml
      :language: toml

.. dropdown:: generated_deps/needs_test.json

   .. literalinclude:: ../tests/complex_setups/generated_deps/needs_test.json
      :language: json

.. dropdown:: project/index.rst

   .. literalinclude:: ../tests/complex_setups/project/index.rst
      :language: rst

.. dropdown:: project/conf.py

   .. literalinclude:: ../tests/complex_setups/project/conf.py
      :language: python

.. dropdown:: project/ubproject.toml

   .. literalinclude:: ../tests/complex_setups/project/ubproject.toml
      :language: toml

Ideally the configuration system is mostly based on TOML files.
That would require local project configuration to refer to a shared configuration.
While
`sharing configuration <https://ubcode.useblocks.com/usage/ubproject.html#sharing-configuration>`__
is already supported by |ubcode|, Sphinx-Needs does not support this yet.
It is is a planned feature. The approach shown above therefore relies on generating a full
configuration file from configuration given in ``conf.py`` locally and
shared TOML configuration sources.

General advice
--------------

Irrespective of where you store your primary configuration:

If no dynamic configuration is used in ``conf.py``, you should consider migrating
over to a declarative configuration completely. It's also possible to load all static
configuration from ``ubproject.toml`` and only use ``conf.py`` for dynamic parts.
