Configuration
=============

The ``needs-config-writer`` extension provides several configuration options to control how
Sphinx-Needs configuration is exported to ``ubproject.toml``.

All configuration options are set in your Sphinx ``conf.py`` file.

.. _`config_outpath`:

needscfg_outpath
----------------

**Type:** ``str``

**Default:** ``"${outdir}/ubproject.toml"``

Specifies the output path where the ``ubproject.toml`` file will be written.

The path supports template variables:

- ``${outdir}`` - Replaced with the Sphinx output directory (build directory)
- ``${srcdir}`` - Replaced with the Sphinx source directory

Relative paths are interpreted relative to the configuration directory (where ``conf.py`` is located).

**Examples:**

.. code-block:: python

   # Write to build output directory (default)
   needscfg_outpath = "${outdir}/ubproject.toml"

   # Write to source directory
   needscfg_outpath = "${srcdir}/ubproject.toml"

   # Write to custom subdirectory in output
   needscfg_outpath = "${outdir}/config/needs.toml"

   # Relative path (relative to conf.py location)
   needscfg_outpath = "generated/ubproject.toml"

   # Absolute path
   needscfg_outpath = "/absolute/path/to/ubproject.toml"

.. _`config_warn_on_diff`:

needscfg_warn_on_diff
---------------------

**Type:** ``bool``

**Default:** ``False``

Controls whether to emit a warning when the existing output file content differs from the
new configuration being generated.

When enabled and the output file already exists:

- The extension compares the existing file content with the new content
- If they differ, emits a warning (subtype: ``content_diff``)
- Whether the file is updated depends on :ref:`config_overwrite`

**Behavior:**

- ``False`` (default): No warning is emitted when content changes
- ``True``: Emits a warning when existing file content differs from new configuration

**Examples:**

.. code-block:: python

   # No warning on content changes (default)
   needscfg_warn_on_diff = False

   # Warn when configuration changes
   needscfg_warn_on_diff = True

.. tip:: Enable this in CI/CD pipelines to detect unexpected configuration changes.

.. _`config_overwrite`:

needscfg_overwrite
------------------

**Type:** ``bool``

**Default:** ``True``

Controls whether to overwrite an existing output file when the configuration content differs.

**Behavior:**

- ``True`` (default): Overwrites the file when content differs
- ``False``: Does not overwrite the file when content differs (logs info message instead)

**Examples:**

.. code-block:: python

   # Automatically update when configuration changes (default)
   needscfg_overwrite = True

   # Prevent overwriting existing files
   needscfg_overwrite = False

.. note::

   When :ref:`config_overwrite` is ``False`` and content differs, the extension will log an info
   message but not update the file. This is useful to prevent accidentally overwriting
   manually edited configuration files.

.. _`config_write_all`:

needscfg_write_all
------------------

**Type:** ``bool``

**Default:** ``False``

Controls whether to include all Sphinx-Needs configuration values (including defaults) or
only explicitly configured values.

**Behavior:**

- ``False`` (default): Only writes configuration values that were explicitly set in ``conf.py``
- ``True``: Writes all Sphinx-Needs configuration values, including default values

**Examples:**

.. code-block:: python

   # Write only explicitly configured values (default)
   needscfg_write_all = False

   # Write all configuration including defaults
   needscfg_write_all = True

.. tip::

   Set this to ``True`` if you want to see the complete configuration with all defaults,
   useful for documentation or when migrating configuration to ``ubproject.toml``.

.. _`config_add_header`:

needscfg_add_header
-------------------

**Type:** ``bool``

**Default:** ``True``

Controls whether to add an auto-generated warning header to the output file.

When enabled, the extension adds a comment header at the top of the generated TOML file
warning that the file is auto-generated and should not be manually modified.

**Behavior:**

- ``True`` (default): Adds header comment to the output file
- ``False``: Generates output file without the header comment

**Examples:**

.. code-block:: python

   # Add auto-generated warning header (default)
   needscfg_add_header = True

   # Skip the header comment
   needscfg_add_header = False

The generated header looks like this:

.. code-block:: toml

   # This file is auto-generated by needs-config-writer.
   # Do not manually modify it - changes will be overwritten.

.. tip::

   Keep this enabled (``True``) to remind users that the file is auto-generated and
   manual changes will be lost on the next build.

.. _`config_exclude_vars`:

needscfg_exclude_vars
---------------------

**Type:** ``list[str]``

**Default:** ``["needs_from_toml", "needs_from_toml_table", "needs_schema_definitions_from_json"]``

Specifies which Sphinx-Needs configuration variables should be excluded from writing to
the output file. This is typically used to exclude resolved configuration values that
should not be duplicated in the output.

The default list excludes:

- ``needs_from_toml`` - Configuration loaded from TOML files
- ``needs_from_toml_table`` - Parsed TOML table data
- ``needs_schema_definitions_from_json`` - Schema definitions loaded from JSON

**Behavior:**

- Variable names in this list will be filtered out
- Only affects variables that start with ``needs_``
- The check is performed on the full attribute name (e.g., ``needs_from_toml``)

**Examples:**

.. code-block:: python

   # Use default exclusions (recommended)
   needscfg_exclude_vars = [
       "needs_from_toml",
       "needs_from_toml_table",
       "needs_schema_definitions_from_json",
   ]

   # Add custom exclusions
   needscfg_exclude_vars = [
       "needs_from_toml",
       "needs_from_toml_table",
       "needs_schema_definitions_from_json",
       "needs_custom_variable",  # Exclude a custom variable
   ]

   # Exclude only specific variables
   needscfg_exclude_vars = ["needs_from_toml"]

   # No exclusions (not recommended - may cause duplicates)
   needscfg_exclude_vars = []

.. warning::

   Removing the default exclusions may cause resolved configuration values to be
   written to the output file, potentially creating circular dependencies or
   duplicate configurations.

.. _`config_merge_toml_files`:

needscfg_merge_toml_files
-------------------------

**Type:** ``list[str]``

**Default:** ``[]`` (empty list)

Specifies a list of TOML file paths to shallow-merge into the final output configuration.
This allows you to include additional configuration from external TOML files into the
generated ``ubproject.toml``.

The paths support the same template variables as :ref:`config_outpath`:

- ``${outdir}`` - Replaced with the Sphinx output directory (build directory)
- ``${srcdir}`` - Replaced with the Sphinx source directory

Relative paths are interpreted relative to the configuration directory (where ``conf.py`` is located).

**Merge behavior:**

- Files are processed in the order they appear in the list
- Each file is shallow-merged (top-level keys only) into the configuration
- If a TOML file has a ``[needs]`` table, only that table is merged
- If no ``[needs]`` table exists, the entire file content is merged
- Values from merged files **override** values from the Sphinx configuration
- Later files in the list override earlier files

**Use cases:**

- Add project-specific metadata not available in Sphinx config
- Include version information from separate TOML files
- Merge team-wide configuration standards
- Add deployment-specific settings

**Examples:**

.. code-block:: python

   # Merge a single additional configuration file
   needscfg_merge_toml_files = ["additional_config.toml"]

   # Merge multiple files (processed in order)
   needscfg_merge_toml_files = [
       "${srcdir}/team_defaults.toml",
       "project_overrides.toml",
   ]

   # Use build output directory
   needscfg_merge_toml_files = ["${outdir}/generated_metadata.toml"]

**Example TOML file with needs table:**

.. code-block:: toml

   # additional_config.toml
   [needs]
   project_version = "1.2.3"
   build_date = "2025-10-28"

**Example TOML file without needs table:**

.. code-block:: toml

   # additional_config.toml
   project_version = "1.2.3"
   build_date = "2025-10-28"

Both formats work - if a ``[needs]`` table exists, only its contents are merged.

.. note::

   If a merge file doesn't exist, a warning is emitted but the build continues.
   Failed file loads (e.g., invalid TOML syntax) also emit warnings without stopping the build.

.. tip::

   Use this feature to separate dynamic configuration (like version numbers or build metadata)
   from static Sphinx-Needs configuration in ``conf.py``.

.. _`config_exclude_defaults`:

needscfg_exclude_defaults
-------------------------

**Type:** ``bool``

**Default:** ``False``

Controls whether to exclude configuration options that are set to their default values.

When enabled, the extension compares each Sphinx-Needs configuration value with its default
value. If they match, the option is excluded from the output file.

**Behavior:**

- ``False`` (default): Include all configuration values (subject to :ref:`config_write_all` and :ref:`config_exclude_vars`)
- ``True``: Exclude configuration values that match their default values

**Use cases:**

- Generate cleaner configuration files with only explicitly set values
- Reduce noise in version-controlled configuration files
- Make it easier to see what's been customized vs. defaults
- Minimize file size for generated configuration

**Examples:**

.. code-block:: python

   # Include all values, even defaults (default behavior)
   needscfg_exclude_defaults = False

   # Exclude values that match defaults
   needscfg_exclude_defaults = True
   needscfg_write_all = True  # Usually combined with write_all

.. note::

   This option works in combination with :ref:`config_write_all`:

   - When ``needscfg_write_all = False``: Only explicitly set values are included (default behavior)
   - When ``needscfg_write_all = True`` and ``needscfg_exclude_defaults = False``:
     All values including defaults are  included
   - When ``needscfg_write_all = True`` and ``needscfg_exclude_defaults = True``:
     All values are considered but defaults are filtered out

.. tip::

   Enable both ``needscfg_write_all`` and ``needscfg_exclude_defaults`` to generate
   configuration that includes all customized values while excluding unchanged defaults.
   This provides a clean view of what's been explicitly configured.

.. _`config_relativize_paths`:

needscfg_relativize_paths
-------------------------

**Type:** ``list[str]``

**Default:** ``[]``

Specifies which configuration fields should have their absolute paths converted to relative paths
in the output file. This is particularly useful when working with build systems like Bazel that
generate absolute paths, but you want the configuration file to use relative paths for portability.

The list contains path patterns that match configuration field names. Patterns must use the full
``needs_`` prefix as they appear in ``conf.py``. Patterns support wildcards:

- Use exact field names with ``needs_`` prefix (e.g., ``"needs_build_json"``)
- Use ``*`` to match array indices (e.g., ``"needs_external_needs[*].json"``)

When a field matches a pattern, the extension will:

1. Check if the value is an absolute path (either a ``Path`` object or a string)
2. Calculate a relative path from the output file location to the target path
3. Replace the absolute path with the relative path in the output

**Behavior:**

- Empty list ``[]`` (default): No path relativization
- Non-empty list: Only fields matching the patterns will have paths relativized

**Use cases:**

- Working with Bazel or similar build systems that use absolute paths
- Making configuration files portable across different machines/environments
- Keeping paths relative to the repository root instead of absolute system paths
- Handling paths that point outside the documentation source tree

**Examples:**

.. code-block:: python

   # No path relativization (default)
   needscfg_relativize_paths = []

   # Relativize the needs_schema_debug_path path
   needscfg_relativize_paths = ["needs_schema_debug_path"]

   # Relativize multiple specific fields
   needscfg_relativize_paths = [
       "needs_schema_debug_path",
       "needs_external_needs[*].json",
   ]

**Example with Bazel:**

If you have a Bazel-generated path like:

.. code-block:: python

   # In conf.py (generated by Bazel)
   needs_schema_debug_path = "/home/user/.cache/bazel/.../execroot/_main/bazel-out/k8-fastbuild/bin/docs.runfiles/project/schema_debug"

And your configuration file output is at:

.. code-block:: text

   /home/user/git/project/docs/ubproject.toml

With this setting:

.. code-block:: python

   needscfg_relativize_paths = ["needs_schema_debug_path"]

The output will contain:

.. code-block:: toml

   [needs]
   schema_debug_path = "../bazel-out/k8-fastbuild/bin/docs.runfiles/project/schema_debug"

.. warning::

   Path relativization is only applied to fields explicitly listed in the allowlist.
   This is a safety feature to prevent unintended path transformations. You must
   explicitly specify which fields should have their paths relativized.

.. note::

   The extension attempts to find common path ancestors when calculating relative paths.
   If no common ancestor exists (e.g., paths on different drives on Windows), the
   absolute path will be returned unchanged.

Examples
--------

Minimal setup
~~~~~~~~~~~~~

.. code-block:: python

   # conf.py
   extensions = [
       "sphinx_needs",
       "needs_config_writer",
   ]

This will write the configuration to ``${outdir}/ubproject.toml``, updating it whenever
the configuration changes. The file contents can be manually copied over to a new primary
``ubproject.toml`` to migrate existing conf.py configuration.

Development setup
~~~~~~~~~~~~~~~~~

.. code-block:: python

   # conf.py
   extensions = [
       "sphinx_needs",
       "needs_config_writer",
   ]

   needscfg_outpath = "ubproject.toml"
   needscfg_overwrite = True
   needscfg_warn_on_diff = False

This configuration writes the file to the directory holding the ``conf.py`` file,
useful during development to keep configuration in version control.
Allow overwriting as the original is version controlled. Any diffs will show up.

Full configuration export
~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

   # conf.py
   extensions = [
       "sphinx_needs",
       "needs_config_writer",
   ]

   needscfg_write_all = True
   needscfg_outpath = "${outdir}/full_config.toml"

This exports the complete configuration including all defaults.

CI/CD setup
~~~~~~~~~~~

.. code-block:: python

   # conf.py
   extensions = [
       "sphinx_needs",
       "needs_config_writer",
   ]

   needscfg_warn_on_diff = True
   needscfg_overwrite = False
   needscfg_outpath = "ubproject.toml"

This configuration emits warnings when configuration changes and prevents overwriting,
allowing you to catch unexpected configuration drift in CI/CD pipelines.
